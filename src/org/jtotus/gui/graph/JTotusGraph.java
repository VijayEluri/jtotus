/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Testtest.java
 *
 * Created on Oct 26, 2010, 8:47:03 PM
 */
package org.jtotus.gui.graph;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Evgeni Kappinen
 */
public class JTotusGraph extends javax.swing.JInternalFrame {

    private GraphPrinter graphPrinter = null;
    public final Object seriesMap_lock = new Object();
    protected int defaultPort = 8888;
    protected DatagramSocket serverSocket = null;
    private Thread serverThread = null;

    public JTotusGraph(String reviewTarget) {
        initComponents();

        this.setName(reviewTarget);
        this.setTitle(reviewTarget);

        if (serverThread == null) {
            if (initialize() == false) {
                return;
            }
        }

        serverThread.start();

        graphPrinter = new GraphPrinter(reviewTarget);
        this.setContentPane(graphPrinter.getContainer());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setName("Form"); // NOI18N

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.jtotus.gui.JtotusApp.class).getContext().getResourceMap(JTotusGraph.class);
        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N
        jMenuBar1.add(jMenu1);

        jMenu2.setText(resourceMap.getString("jMenu2.text")); // NOI18N
        jMenu2.setName("jMenu2"); // NOI18N

        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseClicked(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 394, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 253, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1MouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    // End of variables declaration//GEN-END:variables

    public boolean initialize() {
        JtotusGraphDispatcher dispatcher = new JtotusGraphDispatcher();

        if (dispatcher.bindHost() < 0) {
            return false;
        }

        serverThread = new Thread(dispatcher);

        return true;
    }

    synchronized public int getBindPort() {
        if (serverSocket == null) {
            return -1;
        }
        return defaultPort;
    }

    synchronized private int addtBindPort(int value) {
        defaultPort += value;

        return defaultPort;
    }

    private class JtotusGraphDispatcher implements Runnable {

        public int bindHost() {
            int tries = 0;

            while (serverSocket == null && tries < 100) {
                try {
                    serverSocket = new DatagramSocket(defaultPort);

                    if (serverSocket == null) {
                        addtBindPort(tries);
                        tries++;
                    }
                    //seriesMap = new HashMap<String,TimeSeries>();
                } catch (SocketException ex) {
                    addtBindPort(tries);
                    tries++;
                }
            }

            if (serverSocket == null) {
                return -1;
            }

            return defaultPort;
        }

        public void run() {

            final int maxSizeOfPacket = 1024 * 10;
            byte[] buf = new byte[maxSizeOfPacket];


            if (serverSocket == null) {
                int result = bindHost();
                if (result < 0) {
                    return;
                }
            }

            //Convert data to object

            ObjectInputStream is = null;

            DatagramPacket packet = new DatagramPacket(buf, maxSizeOfPacket);
            ByteArrayInputStream byteStream = new ByteArrayInputStream(buf);


            while (true) {
                try {
                    //  byteStream.reset();
                    //Recieve packet
                    serverSocket.receive(packet);

                    is = new ObjectInputStream(new BufferedInputStream(byteStream));

                    GraphPacket obj = (GraphPacket) is.readObject();

                    // add it to blocking queue
                    //queue.putFirst(obj);
                    //FIXME:data lost !
                    byteStream.reset();
                    graphPrinter.drawSeries(obj);
//                    if(parent.getState() == Thread.State.TIMED_WAITING) {
//                        parent.interrupt();
//                    }


                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(JTotusGraph.class.getName()).log(Level.SEVERE, null, ex);
                    break;
                } catch (IOException ex) {
                    Logger.getLogger(JTotusGraph.class.getName()).log(Level.SEVERE, null, ex);
                    break;
                }
            }

            return;
        }
    }
}
